#!/usr/bin/ruby

require 'optparse'
require 'fileutils'

RELEASE_NAMES = {
  '12.10' => 'quantal',
  '12.04' => 'precise',
  '11.10' => 'oneiric',
  '11.04' => 'natty',
  '10.04' => 'lucid'
}

options = {
  :variant    => 'minbase',
  :components => 'main,universe',
  :packages   => 'dialog,apt,apt-utils,aptitude,gpgv,resolvconf,iproute,inetutils-ping,dhcp3-client,ssh,lsb-release,lxcguest',
  :release    => 'natty',
  :arch       => 'amd64',
  :path       => '/var/cache/debootstrap'
}

unless RUBY_PLATFORM.downcase.include?('linux')
  STDERR.puts "lxc-setup-rootfs is not supported by your platform"
  exit 1
end

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this information.') do
    puts(opts)
    exit
  end

  opts.on('--variant NAME', 'Bootstrap variant. Default: minbase') do |v|
    options[:variant] = v
  end

  opts.on('--components LIST', 'System components') do |v|
    options[:components] = v
  end

  opts.on('--packages LIST', 'List of packages to install') do |v|
    options[:packages] = v.strip.split(',').uniq
  end

  opts.on('--release NAME', 'Release name') do |v|
    if RELEASE_NAMES.include?(v)
      options[:release] = RELEASE_NAMES[v]
    elsif RELEASE_NAMES.values.include?(v)
      options[:release] = v
    else
      raise OptionParser::InvalidOption, "should be one of: #{RELEASE_NAMES.values.join(', ')}"
    end
  end

  opts.on('--arch ARCH', 'Release architechture') do |v|
    if ['amd64', 'i386'].include?(v)
      options[:arch] = v
    else
      raise OptionParser::InvalidOption, "Invalid release arch."
    end
  end

  opts.on('--path PATH', 'Extract path') do |path|
    options[:path] = path
  end
end

begin
  optparse.parse!

  params = [
    "--verbose",
    "--variant=#{options[:variant]}",
    "--components=#{options[:components]}",
    "--include=#{options[:packages]}",
    "--arch=#{options[:arch]}",
    options[:release],
    File.join(options[:path], "#{options[:release]}_#{options[:arch]}")
  ]

  cmd = "debootstrap #{params.join(' ')}"
  puts `#{cmd}`
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => err
  STDERR.puts(err.message)
  exit(1)
end